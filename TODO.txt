- Camera
    #- Draw to the screen texture
    #- Update the screen with this texture
    #- Resizing
    - Smooth scrolling
    #- UI camera
    #- Screen pos to draw pos
    - Better name for draw texture (world texture?)
    - Improved creation AffineTransform options
    - Add option to upsample to screen size
    - Add feature to make UI for a reference, virtual screen size (width, and height) (=> Match the
      screen height when upscaling, but stretch each x coordinate so that the width would match the screen width,
      => Scale x and y independently)
    #- Make the position the center of the viewing field
    - Only render objects that are visible

#- Make GamePanel the scene manager (handle the events properly + add methods for setting the scene)

- Call start (component) at the beginning of the next frame and not directly
- Call onDestroy after onUpdate / onDraw / ... => Make Component an IDestroyable and in GameObject register
  the component for the destroy loop

- Collision engine
  #- Detect collisions
  #- Resolve collisions
  #- Support layers
  #- Add CollisionEngine to the Scene class
  - Think about how to handle: shouldCollideWithOthers, shouldOthersCollideWithSelf

#- Rendering with SpriteRenderer
    #- Scaling
    #- Rotation
    #- Sorting based on layers
    #- Clean up code

#- Keyboard Handler

#- Mouse Handler

- Sound System
    (- Create a SoundManager for loading and playing clips)
    #- Sound class for representing a sound
    - Preload the sound data of SoundEffects into memory before playing (and share this memory)
    #- Call close() on each clip
    - Load the sound in a separate thread
    #- Rename Sound to SoundEffect
    #- Music class for long sound files that need to be streamed from a file (with pause method for stopping without closing)
    (https://docs.oracle.com/javase/8/docs/technotes/guides/sound/programmer_guide/chapter4.html)
    #- 3D Sound System (pan and volume)
    - Add close methods for Music, SoundEffect and SoundEffectInstance
    - Add pan to Music

- Graphics Helper for drawing images

#- Time (.deltaTime, .time, ...)

- Make public methods that return a Vector2 return a copy

#- Add tags to GameObjects

- Vector2: Get angle from Vector2

#- Simple random util class
    #- Range function
    #- Generate Vectors

#- Constants for Key ids (make a file called Keys)
#- Same for Mouse buttons

- Use javadoc comments

- Game Application
    #- Move the main code (which sets up the window) into a separate class (Application)
    - Add more methods for customisation (e.g. title)

- Add print() function to Components for ease of use (wraps System.out.println)

#- Improve the constructor of GameObject: Make a new constructor without parameters that defaults to the
  active scene

- Update package name for the game engine (com.inspiaaa.decaf?)

- Mouse and Keyboard: make the setButtonState method public
- Mouse and Keyboard: Run in two phases: UI and game phase. The UI should then be able to block the game input
  from reaching the second phase
- Mouse: hide / show mouse pointer
#- Add mouse wheel API to Mouse
#- Document mouse wheel API

- Resources class for accessing files in a dedicated resources / assets folder

- Optimise imports

- Optimise rendering pipeline (less intermediate images)

- 2d light system (alpha based masks without shadows)

- Improve formatting: Add space when casting (int)x => (int) x